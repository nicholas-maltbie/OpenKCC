name: Tests Validation

on:
  workflow_call:
    secrets:
      UNITY_LICENSE:
        required: true

jobs:
  tests-validation:
    name: Test Validation for Pull Request ${{ matrix.version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - version: ""
            project_path: "."
            post_comment: true
          - version: 2022.3.4f1
            project_path: ./Versioning/OpenKCC_2022.3
            post_comment: false
          - version: 2021.3.28f1
            project_path: ./Versioning/OpenKCC_2021.3
            post_comment: false
          - version: 2020.3.48f1
            project_path: ./Versioning/OpenKCC_2020.3
            post_comment: false
          - version: 2019.4.40f1
            project_path: ./Versioning/OpenKCC_2019.4
            post_comment: false
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setvars
      - uses: ./.github/actions/git-lfs-cache
      - uses: ./.github/actions/unity-library-cache
        with:
          target_platform: WebGL
          library_directory: ${{ matrix.project_path }}/Library
          unity_version:  ${{ matrix.version || env.UNITY_VERSION }}

      - name: Run All Tests for Unity ${{ matrix.version || env.UNITY_VERSION }}
        id: tests
        uses: game-ci/unity-test-runner@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          unityVersion: ${{ matrix.version || env.UNITY_VERSION }}
          projectPath: ${{ matrix.project_path }}
          testMode: All
          checkName: All Test Results
          customParameters: -testFilter "nickmaltbie.OpenKCC.*" -nographics
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+nickmaltbie.OpenKCC,+nickmaltbie.OpenKCC.netcode,+nickmaltbie.OpenKCC.cinemachine,-nickmaltbie.OpenKCC.Tests.*;dontClear'

      - name: Copy Coverage Results
        run: |
          mkdir -p allResults
          sudo cp -r ${{ steps.tests.outputs.coveragePath }} allResults/CodeCoverage
          sudo cp -r ${{ steps.tests.outputs.artifactsPath }} allResults/artifacts

      - name: Upload Results
        uses: actions/upload-artifact@v3
        with:
          name: Test & Coverage Results ${{ matrix.version || env.UNITY_VERSION }}
          path: allResults
          retention-days: 7

      - name: Find Coverage
        id: coverage
        run: |
          echo ::set-output name=COVERAGE_FILE::$(find ${{ steps.tests.outputs.coveragePath }} -name "Summary.xml")
          find ${{ steps.tests.outputs.coveragePath }} -name "*.xml"
          ls -lah .
          ls -lah ${{ steps.tests.outputs.coveragePath }}

      - name: Line Coverage
        id: LineCoverage
        uses: QwerMike/xpath-action@v1
        with:
          filename: "${{ steps.coverage.outputs.COVERAGE_FILE }}"
          expression: '//CoverageReport/Summary/Linecoverage/text()'

      - name: Parse Coverage
        id: ParseCoverage
        run: |
          echo ::set-output name=LINE_COVERAGE::$(cut -d "=" -f2- <<< ${{ steps.LineCoverage.outputs.result }})

      - name: Add PR Comment
        uses: mshick/add-pr-comment@v1
        if: github.event_name == 'pull_request' && matrix.post_comment
        with:
          message: |
            Test Coverage Results for ${{ matrix.testMode }}:
            Line Coverage: ${{ steps.ParseCoverage.outputs.LINE_COVERAGE }}%
            Link to run results: [https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
          allow-repeats: false # This is the default
