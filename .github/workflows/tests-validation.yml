name: Tests Validation

on:
  pull_request:
  push:
    branches:
      - 'main'

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  test-validation-pull-request:
    strategy:
      fail-fast: false
    name: Test Validation for Pull Request
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setvars
      - uses: ./.github/actions/git-lfs-cache
      - uses: ./.github/actions/unity-library-cache
        with:
          target_platform: WebGL

      - name: Run All Tests for Unity ${{ env.UNITY_VERSION }}
        id: tests
        uses: game-ci/unity-test-runner@v2.0.2
        with:
          unityVersion: ${{ env.UNITY_VERSION }}
          testMode: All
          checkName: All Test Results
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+nickmaltbie.TemplateUnityPackage'

      - name: Copy Coverage Results
        run: |
          mkdir -p allResults
          sudo cp -r ${{ steps.tests.outputs.coveragePath }} allResults/CodeCoverage
          sudo cp -r ${{ steps.tests.outputs.artifactsPath }} allResults/artifacts

      - name: Upload Results
        uses: actions/upload-artifact@v3
        with:
          name: Test & Coverage Results
          path: allResults
          retention-days: 7
      
      - name: Find Coverage
        id: coverage
        run: |
          echo ::set-output name=COVERAGE_FILE::$(find ${{ steps.tests.outputs.coveragePath }} -name "Summary.xml")
          find ${{ steps.tests.outputs.coveragePath }} -name "*.xml"
          ls -lah .
          ls -lah ${{ steps.tests.outputs.coveragePath }}
      
      - name: Line Coverage
        id: LineCoverage
        uses: QwerMike/xpath-action@v1
        with:
          filename: "${{ steps.coverage.outputs.COVERAGE_FILE }}"
          expression: '//CoverageReport/Summary/Linecoverage/text()'
      
      # - name: Branch Coverage
      #   id: branchCoverage
      #   uses: QwerMike/xpath-action@v1
      #   with:
      #     filename: "${{ env.COVERAGE_FILE }}"
      #     expression: '//CoverageSession/Summary/@branchCoverage'
      
      - name: Parse Coverage
        id: ParseCoverage
        run: |
          echo ::set-output name=LINE_COVERAGE::$(cut -d "=" -f2- <<< ${{ steps.LineCoverage.outputs.result }})
      
      - name: Add PR Comment
        uses: mshick/add-pr-comment@v1
        with:
          message: |
            Test Coverage Results for ${{ matrix.testMode }}:
            Line Coverage: ${{ steps.ParseCoverage.outputs.LINE_COVERAGE }}%
            Link to run results: [https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
          allow-repeats: false # This is the default

      # - name: Assert Coverage
      #   run: |
      #     python3 -c "assert ${{ steps.ParseCoverage.outputs.LINE_COVERAGE }} >= 100, 'Line Coverage must be 100%, is only ${{ env.LINE_COVERAGE }}%'"
