name: Build and Deploy WebGL and Documentation

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: production-${{ github.ref }}
  cancel-in-progress: true

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  create-package:
    name: Setup package for project
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: Create Latest Release Package
        uses: ./.github/workflows/create-package.yml

  # Verify build will perform as expected
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    
    steps:
      - name: Test Verification
        uses: ./github/actions/test-validation
        with:
          UNITY_LICENSE: ${{ env.UNITY_LICENSE }}

      - name: Project linting
        uses: ./.github/workflows/format.yml
        with:
          UNITY_LICENSE: ${{ env.UNITY_LICENSE }}

  # Build the WebGL Unity application.
  build-webgl-app:
    name: Build WebGL App
    needs: [build-verification]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setvars
      - uses: ./.github/actions/git-lfs-cache
      - uses: ./.github/actions/unity-library-cache
        with:
          target_platform: WebGL

      # Build the game deployment at build
      - uses: game-ci/unity-builder@v2
        with:
          unityVersion: ${{ env.UNITY_VERSION }}
          targetPlatform: WebGL
          buildMethod: ScriptBatch.OfficialBuild_WebGL

      # save build to temp_build_webgl
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: temp_build_webgl
          path: Builds/${{ env.PROJECT_NAME }}-WebGL

  # Build the documentation
  build-docs:
    name: DocFX build for website
    runs-on: windows-latest # Required by DocFX
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setvars
      - uses: ./.github/actions/git-lfs-cache

      - name: Fetch all git tags
        run: git fetch --prune --unshallow --tags

      # Restore dotnet tools. This handles cache implicitly.
      - run: dotnet tool restore

      # build full website
      - name: Build Website
        run: .\Documentation\build.ps1

      # Upload build to temp_build_docs
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: temp_build_docs
          path: _site

  # Combine artifacts for website
  combine-and-deploy-artifact:
    name: Combine and Deploy Artifact
    runs-on: ubuntu-latest
    needs: [build-webgl-app, build-docs]
    steps:
      # Download previous builds
      - name: Download WebGL Build
        uses: actions/download-artifact@v3
        with:
          name: temp_build_webgl
          path: _site

      - name: Download Docs Build
        uses: actions/download-artifact@v3
        with:
          name: temp_build_docs
          path: _site/docs

      - name: Upload Site Artifact
        uses: actions/upload-pages-artifact@v1
        with:
          name: github-pages

  # Deploy job
  deploy-combined-webgl:
    name: Deploy Combined Artifacts
    
    # Add a dependency to the build job
    needs: combine-and-deploy-artifact

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

  # Cleanup the build artifacts
  cleanup-build-artifacts:
    name: Cleanup the build artifacts after deploying site.
    runs-on: ubuntu-latest
    if: always()
    needs: deploy-combined-webgl

    steps:
      - name: Cleanup temp build artifacts
        uses: joutvhu/delete-artifact@v1
        continue-on-error: true
        with:
          name: |
            temp_build_webgl
            temp_build_docs
            github-pages
